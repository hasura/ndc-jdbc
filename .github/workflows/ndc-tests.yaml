name: NDC tests

on:
  pull_request:
    branches:
      - main

jobs:
  validate-test-cases:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        connector: [snowflake]
        include:
          - connector: snowflake
            jdbc_url_env: SNOWFLAKE_JDBC_URL
            config_command: make run-snowflake-introspection
            run_command: make run-snowflake
            test_dir: ndc-tests/snowflake
            port: 8081

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Download and Setup NDC Test
        run: |
          curl -L --fail -o ndc-test https://github.com/hasura/ndc-spec/releases/download/v0.1.6/ndc-test-x86_64-unknown-linux-gnu
          chmod +x ndc-test
          sudo mv ndc-test /usr/local/bin/

      - name: Generate configuration
        env:
          JDBC_URL: ${{ secrets[matrix.jdbc_url_env] }}
          JOOQ_PRO_EMAIL: ${{ secrets.JOOQ_PRO_EMAIL }}
          JOOQ_PRO_LICENSE: ${{ secrets.JOOQ_PRO_LICENSE }}
        run: |
          mkdir -p configs/${{ matrix.connector }}
          ${{ matrix.config_command }} > config-generation.log 2>&1 || {
            echo "Configuration generation failed for ${{ matrix.connector }}. Last 50 lines of log:"
            tail -n 50 config-generation.log
            exit 1
          }
          cat configs/${{ matrix.connector }}/configuration.json

      - name: Run the connector
        env:
          JDBC_URL: ${{ secrets[matrix.jdbc_url_env] }}
          JOOQ_PRO_EMAIL: ${{ secrets.JOOQ_PRO_EMAIL }}
          JOOQ_PRO_LICENSE: ${{ secrets.JOOQ_PRO_LICENSE }}
        run: |
          ${{ matrix.run_command }} > connector.log 2>&1 &
          echo "SERVER_PID=$!" >> $GITHUB_ENV

          echo "Waiting for the ${{ matrix.connector }} connector to be ready..."
          timeout 30 bash -c 'while ! nc -z localhost ${{ matrix.port }}; do sleep 1; done' || {
            echo "Connector failed to start. Last 50 lines of log:"
            tail -n 50 connector.log
            exit 1
          }

      - name: Print schema
        id: print_schema
        run: |
          curl http://localhost:8081/schema | jq .scalar_types.NUMBER

      - name: Run Tests
        id: run_tests
        run: |
          set -o pipefail  # This ensures pipe failures are propagated
          ndc-test replay --endpoint http://localhost:${{ matrix.port }} --snapshots-dir ${{ matrix.test_dir }} 2>&1 | tee test-output.log
          exit_code=$?
          if [ $exit_code -eq 1 ]; then
            echo "Tests failed with exit code $exit_code"
            exit 1
          fi

      - name: Stop Connector
        if: always()
        run: |
          if [ ! -z "${{ env.SERVER_PID }}" ]; then
            kill ${{ env.SERVER_PID }} || true
            sleep 2
            kill -9 ${{ env.SERVER_PID }} || true
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.connector }}-logs
          path: |
            config-generation.log
            connector.log
            test-output.log
          retention-days: 5

      - name: Exit with test status
        if: steps.run_tests.outcome == 'failure'
        run: exit 1

permissions:
  contents: read
  pull-requests: write
